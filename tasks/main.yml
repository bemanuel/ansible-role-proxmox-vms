---

- name: Check if deploy-args file exists
  local_action: stat path="{{ role_path }}/templates/deploy-args-{{ item.value.ubuntu_distribution |
    default(defaults.ubuntu_distribution) }}.j2"
  become: false
  with_dict: "{{ vms }}"
  register: deploy_file_exists

- name: Check if preseed file exists
  local_action: stat path="{{ role_path }}/files/ubuntu-{{ item.value.ubuntu_distribution |
    default(defaults.ubuntu_distribution) }}.seed"
  become: false
  with_dict: "{{ vms }}"
  register: preseed_file_exists

- name: Create virtual machines
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.0.value.node }}"
    name: "{{ item.0.key }}"
    net: "{{ item.0.value.net | default(defaults.net) }}"
    scsihw: "{{ item.0.value.scsihw | default(defaults.scsihw) }}"
    virtio: "{{ item.0.value.virtio | default(defaults.virtio) }}"
    cores: "{{ item.0.value.cores | default(defaults.cores) }}"
    memory: "{{ item.0.value.memory_size | default(defaults.memory_size) }}"
    balloon: "{{ item.0.value.balloon | default(defaults.balloon) }}"
    vga: "qxl"
    ostype: "{{ item.0.value.ostype | default(defaults.ostype) }}"
    # Look for deploy-args-file of the vm and replace all newlines with nothing. If not found take the template-file and
    # replace all newlines with nothing (all commands in one line). See ansible filter documentation.
    args: "{{ lookup('template', 'deploy-args-'~item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution)~'.j2' if item.1.stat.exists else defaults.deploy_args_template) | replace('\n', '') }}"
    cpu: "{{ item.0.value.cpu | default(defaults.cpu) }}"
    onboot: "{{ item.0.value.onboot | default(defaults.onboot) }}"
    state: present
  with_together:
    - "{{ lookup('dict', vms) }}"
    - "{{ deploy_file_exists.results }}"
  loop_control:
    pause: 10
  notify: sleep
  register: created_vms_pve

- meta: flush_handlers
  when: created_vms_pve.changed

- name: Create temporary directory for netboot image
  file:
    path: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}
    state: directory
    mode: 0755
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Download and unpack netboot image
  unarchive:
    src: http://archive.ubuntu.com/ubuntu/dists/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/main/installer-amd64/current/images/netboot/netboot.tar.gz
    dest: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}
    remote_src: yes
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Move linux kernel file
  copy:
    src: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/ubuntu-installer/amd64/linux
    dest: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}-kernel
    remote_src: yes
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Create temporary directory for initrd
  file:
    path: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/{{ item.item.0.key }}-initrd
    state: directory
    mode: 0755
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Unpack initrd
  shell: zcat /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/ubuntu-installer/amd64/initrd.gz | cpio -id
  args:
    chdir: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/{{ item.item.0.key }}-initrd
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Copy preseed file
  copy:
    src: "{{ 'files/ubuntu-'~item.0.item.0.value.ubuntu_distribution |
              default(defaults.ubuntu_distribution)~'.seed' if item.1.stat.exists else defaults.preseed_template }}"
    dest: /tmp/{{ item.0.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/{{ item.0.item.0.key }}-initrd/preseed.cfg
  with_together:
    - "{{ created_vms_pve.results }}"
    - "{{ preseed_file_exists.results }}"
  when: item.0.changed

- name: Build post installation script
  template:
    src: templates/finish-installation.j2
    dest: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/{{ item.item.0.key }}-initrd/finish-installation
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Repack initrd
  shell: find . | cpio --create --format='newc' | gzip > /tmp/{{ item.item.0.key }}-initrd.gz
  args:
    chdir: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}/{{ item.item.0.key }}-initrd
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Delete temporary directory
  file:
    state: absent
    path: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Start ubuntu setup
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.0.value.node }}"
    name: "{{ item.item.0.key }}"
    state: started
  with_items: "{{ created_vms_pve.results }}"
  notify: sleep
  when: item.changed

- meta: flush_handlers
  when: created_vms_pve.changed

- name: Run ubuntu setup only once
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.0.value.node }}"
    name: "{{ item.item.0.key }}"
    delete: args
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Wait for virtual machines to finish installation
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.0.value.node }}"
    name: "{{ item.item.0.key }}"
    state: current
  with_items: "{{ created_vms_pve.results }}"
  register: current_vm_state
  until: current_vm_state.status == "stopped"
  retries: 60
  delay: 10
  when: item.changed

- name: Restart vms
  proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox.api_host }}"
    node: "{{ item.item.0.value.node }}"
    name: "{{ item.item.0.key }}"
    state: started
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Wait for virtual machines to finish rebooting
  wait_for:
    port: 22
    host: "{{ item.item.0.value.network.ip }}"
    search_regex: OpenSSH
    delay: 10
    timeout: 480
    msg: Timeout or polling failed.
  when: item.changed
  with_items: "{{ created_vms_pve.results }}"

- name: Delete initrd
  file:
    state: absent
    path: /tmp/{{ item.item.0.key }}-initrd.gz
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Delete kernel
  file:
    state: absent
    path: /tmp/{{ item.item.0.value.ubuntu_distribution | default(defaults.ubuntu_distribution) }}-kernel
  with_items: "{{ created_vms_pve.results }}"
  when: item.changed

- name: Print success message
  debug:
    msg: "The installation of {{ item.item.0.value.ubuntu_distribution |
          default(defaults.ubuntu_distribution) }} on {{ item.item.0.key }} was successful!"
  when: item.changed
  with_items: "{{ created_vms_pve.results }}"
